#!/usr/bin/env bash

###############################################################################
# ERROR: Let the user know if the script fails
###############################################################################

trap 'ret=$?; test $ret -ne 0 && printf "\n   \e[31m\033[0m  Install failed  \e[31m\033[0m\n" >&2; exit $ret' EXIT

set -e

###############################################################################
# TWIRL: Check for required functions file
###############################################################################

if [ -e lib/setup/blotto ]; then
	cd "$(dirname "${BASH_SOURCE[0]}")" \
		&& . "lib/setup/blotto"
else
	printf "\n ⚠️  ./blotto not found - OTTO loves to get blotto!\n"
	exit 1
fi

###############################################################################
# CHECK: Bash version
###############################################################################

check_bash_version

printf "
   _
│───────────────────────────────────────────────────│
│  Safe to run multiple times on the same machine.  │
│  It ${green}installs${reset}, ${blue}upgrades${reset}, or ${yellow}skips${reset} packages based   │
│  on what is already installed on the machine.     │
╰───────────────────────────────────────────────────╯
   ${dim}$(get_os) $(get_os_version) ${normal} // ${dim}$BASH ${normal} // ${dim}$BASH_VERSION${reset}
"

###############################################################################
# CHECK: Internet
###############################################################################
chapter "Checking internet connection…"
check_internet_connection

###############################################################################
# PROMPT: Password
###############################################################################
chapter "Caching password…"
ask_for_sudo

###############################################################################
# INSTALL: Dependencies
###############################################################################
chapter "Installing Dependencies…"

# -----------------------------------------------------------------------------
# Ruby - Checking Ruby version
# -----------------------------------------------------------------------------
if [[ "$(command -v ruby)" != *"2.6.0"* ]]; then
print_warning "OTTO detected $(command -v ruby) as your system installed Ruby version"
print_warning "OTTO requires Ruby v2.6.0 to be installed at both system and RVM level."
if ask "Would you like to remove all older versions and install v2.6.0 to your system?" Y; then
print_in_yellow "Uninstalling old system version(s) of Ruby\n"
  brew uninstall ruby
else
print_in_red "You have chosen to not remove older system versions of Ruby. This can cause issues between the system and RVM Ruby versions that might impact OTTO"
print_in_red "\nIf you find issues in running OTTO please rerun setup_script and choose to remove the older system versions of Ruby\n"
fi

else
  print_success_muted "Correct Ruby version already installed. Skipping."
fi

# -----------------------------------------------------------------------------
# RVM
# -----------------------------------------------------------------------------
if [ -x rvm ]; then
	step "Installing RVM with latest stable Ruby..."
	 curl -L https://get.rvm.io | bash -s stable --ruby
	print_success "RVM installed!"
	step "Installing 2.6.0 Ruby..."
	rvm install 2.6.0
	rvm --default use 2.6.0
	rvm list
	rvmv=$(rvm current)
	print_success "Using Node $rvmv!"
else
	print_success_muted "RVM and stable Ruby already installed. Skipping."
fi

# -----------------------------------------------------------------------------
# Homebrew
# -----------------------------------------------------------------------------
if ! [ -x "$(command -v brew)" ]; then
	step "Installing Homebrew…"
	curl -fsS 'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby
	export PATH="/usr/local/bin:$PATH"
	print_success "Homebrew installed!"
else
	print_success_muted "Homebrew already installed. Skipping."
fi

if brew list | grep -Fq brew-cask; then
	step "Uninstalling old Homebrew-Cask…"
	brew uninstall --force brew-cask
	print_success "Homebrew-Cask uninstalled!"
fi

###############################################################################
# INSTALL: brews
###############################################################################
if [ -e $cwd/dependencies/brews ]; then
	chapter "Installing Homebrew formulae…"

	for brew in $(<$cwd/dependencies/brews); do
		install_brews $brew
	done
fi

###############################################################################
# UPDATE: Homebrew
###############################################################################
chapter "Updating Homebrew formulae…"
brew update

###############################################################################
# INSTALL: casks
###############################################################################
if [ -e $cwd/dependencies/casks ]; then
	chapter "Installing apps via Homebrew…"

	for cask in $(<$cwd/dependencies/casks); do
	    install_application_via_brew $cask
	done
fi

###############################################################################
# CLEAN: Homebrew files
###############################################################################
chapter "Cleaning up Homebrew files…"
brew cleanup

###############################################################################
# INSTALL: Gems
###############################################################################
if [ -e $cwd/Gemfile.lock ]; then
	chapter "Updating Gemfile.lock"
	bundle update
	print_success "Gems updated"
else
	chapter "Installing Gems"
	bundle install
	print_success "Gems installed"
fi

got_blotto
